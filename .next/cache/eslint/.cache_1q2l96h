[{"/Users/rulz-ai/Rulz-AI/pages/_app.tsx":"1","/Users/rulz-ai/Rulz-AI/pages/_document.tsx":"2","/Users/rulz-ai/Rulz-AI/pages/api/chat.ts":"3","/Users/rulz-ai/Rulz-AI/pages/api/google.ts":"4","/Users/rulz-ai/Rulz-AI/pages/api/home/home.context.tsx":"5","/Users/rulz-ai/Rulz-AI/pages/api/home/home.state.tsx":"6","/Users/rulz-ai/Rulz-AI/pages/api/home/home.tsx":"7","/Users/rulz-ai/Rulz-AI/pages/api/home/index.ts":"8","/Users/rulz-ai/Rulz-AI/pages/api/models.ts":"9","/Users/rulz-ai/Rulz-AI/pages/index.tsx":"10","/Users/rulz-ai/Rulz-AI/components/Buttons/SidebarActionButton/SidebarActionButton.tsx":"11","/Users/rulz-ai/Rulz-AI/components/Buttons/SidebarActionButton/index.ts":"12","/Users/rulz-ai/Rulz-AI/components/Chat/Chat.tsx":"13","/Users/rulz-ai/Rulz-AI/components/Chat/ChatInput.tsx":"14","/Users/rulz-ai/Rulz-AI/components/Chat/ChatLoader.tsx":"15","/Users/rulz-ai/Rulz-AI/components/Chat/ChatMessage.tsx":"16","/Users/rulz-ai/Rulz-AI/components/Chat/ErrorMessageDiv.tsx":"17","/Users/rulz-ai/Rulz-AI/components/Chat/MemoizedChatMessage.tsx":"18","/Users/rulz-ai/Rulz-AI/components/Chat/ModelSelect.tsx":"19","/Users/rulz-ai/Rulz-AI/components/Chat/PluginSelect.tsx":"20","/Users/rulz-ai/Rulz-AI/components/Chat/PromptList.tsx":"21","/Users/rulz-ai/Rulz-AI/components/Chat/Regenerate.tsx":"22","/Users/rulz-ai/Rulz-AI/components/Chat/SystemPrompt.tsx":"23","/Users/rulz-ai/Rulz-AI/components/Chat/Temperature.tsx":"24","/Users/rulz-ai/Rulz-AI/components/Chat/VariableModal.tsx":"25","/Users/rulz-ai/Rulz-AI/components/Chatbar/Chatbar.context.tsx":"26","/Users/rulz-ai/Rulz-AI/components/Chatbar/Chatbar.state.tsx":"27","/Users/rulz-ai/Rulz-AI/components/Chatbar/Chatbar.tsx":"28","/Users/rulz-ai/Rulz-AI/components/Chatbar/components/ChatFolders.tsx":"29","/Users/rulz-ai/Rulz-AI/components/Chatbar/components/ChatbarSettings.tsx":"30","/Users/rulz-ai/Rulz-AI/components/Chatbar/components/ClearConversations.tsx":"31","/Users/rulz-ai/Rulz-AI/components/Chatbar/components/Conversation.tsx":"32","/Users/rulz-ai/Rulz-AI/components/Chatbar/components/Conversations.tsx":"33","/Users/rulz-ai/Rulz-AI/components/Chatbar/components/PluginKeys.tsx":"34","/Users/rulz-ai/Rulz-AI/components/Folder/Folder.tsx":"35","/Users/rulz-ai/Rulz-AI/components/Folder/index.ts":"36","/Users/rulz-ai/Rulz-AI/components/Markdown/CodeBlock.tsx":"37","/Users/rulz-ai/Rulz-AI/components/Markdown/MemoizedReactMarkdown.tsx":"38","/Users/rulz-ai/Rulz-AI/components/Mobile/Navbar.tsx":"39","/Users/rulz-ai/Rulz-AI/components/Promptbar/PromptBar.context.tsx":"40","/Users/rulz-ai/Rulz-AI/components/Promptbar/Promptbar.state.tsx":"41","/Users/rulz-ai/Rulz-AI/components/Promptbar/Promptbar.tsx":"42","/Users/rulz-ai/Rulz-AI/components/Promptbar/components/Prompt.tsx":"43","/Users/rulz-ai/Rulz-AI/components/Promptbar/components/PromptFolders.tsx":"44","/Users/rulz-ai/Rulz-AI/components/Promptbar/components/PromptModal.tsx":"45","/Users/rulz-ai/Rulz-AI/components/Promptbar/components/PromptbarSettings.tsx":"46","/Users/rulz-ai/Rulz-AI/components/Promptbar/components/Prompts.tsx":"47","/Users/rulz-ai/Rulz-AI/components/Promptbar/index.ts":"48","/Users/rulz-ai/Rulz-AI/components/Search/Search.tsx":"49","/Users/rulz-ai/Rulz-AI/components/Search/index.ts":"50","/Users/rulz-ai/Rulz-AI/components/Settings/Import.tsx":"51","/Users/rulz-ai/Rulz-AI/components/Settings/Key.tsx":"52","/Users/rulz-ai/Rulz-AI/components/Settings/SettingDialog.tsx":"53","/Users/rulz-ai/Rulz-AI/components/Sidebar/Sidebar.tsx":"54","/Users/rulz-ai/Rulz-AI/components/Sidebar/SidebarButton.tsx":"55","/Users/rulz-ai/Rulz-AI/components/Sidebar/components/OpenCloseButton.tsx":"56","/Users/rulz-ai/Rulz-AI/components/Sidebar/index.ts":"57","/Users/rulz-ai/Rulz-AI/components/Spinner/Spinner.tsx":"58","/Users/rulz-ai/Rulz-AI/components/Spinner/index.ts":"59","/Users/rulz-ai/Rulz-AI/src/App.js":"60","/Users/rulz-ai/Rulz-AI/src/App.test.js":"61","/Users/rulz-ai/Rulz-AI/src/index.js":"62","/Users/rulz-ai/Rulz-AI/src/realtime.js":"63","/Users/rulz-ai/Rulz-AI/src/reportWebVitals.js":"64","/Users/rulz-ai/Rulz-AI/src/setupTests.js":"65"},{"size":762,"mtime":1701783120625,"results":"66","hashOfConfig":"67"},{"size":877,"mtime":1701783120625,"results":"68","hashOfConfig":"67"},{"size":2040,"mtime":1701783120625,"results":"69","hashOfConfig":"67"},{"size":4843,"mtime":1701783120625,"results":"70","hashOfConfig":"67"},{"size":911,"mtime":1701783120625,"results":"71","hashOfConfig":"67"},{"size":1557,"mtime":1701783120625,"results":"72","hashOfConfig":"67"},{"size":12427,"mtime":1701783120625,"results":"73","hashOfConfig":"67"},{"size":55,"mtime":1701783120625,"results":"74","hashOfConfig":"67"},{"size":2185,"mtime":1701783120625,"results":"75","hashOfConfig":"67"},{"size":59,"mtime":1701783120626,"results":"76","hashOfConfig":"67"},{"size":423,"mtime":1701783120322,"results":"77","hashOfConfig":"67"},{"size":50,"mtime":1701783120322,"results":"78","hashOfConfig":"67"},{"size":18082,"mtime":1701783120322,"results":"79","hashOfConfig":"67"},{"size":13511,"mtime":1701783120322,"results":"80","hashOfConfig":"67"},{"size":748,"mtime":1701783120322,"results":"81","hashOfConfig":"67"},{"size":10840,"mtime":1701783120322,"results":"82","hashOfConfig":"67"},{"size":817,"mtime":1701783120322,"results":"83","hashOfConfig":"67"},{"size":270,"mtime":1701783120322,"results":"84","hashOfConfig":"67"},{"size":2148,"mtime":1701783120322,"results":"85","hashOfConfig":"67"},{"size":2951,"mtime":1701783120322,"results":"86","hashOfConfig":"67"},{"size":1288,"mtime":1701783120322,"results":"87","hashOfConfig":"67"},{"size":948,"mtime":1701783120322,"results":"88","hashOfConfig":"67"},{"size":6903,"mtime":1701783120323,"results":"89","hashOfConfig":"67"},{"size":2207,"mtime":1701783120323,"results":"90","hashOfConfig":"67"},{"size":3933,"mtime":1701783120323,"results":"91","hashOfConfig":"67"},{"size":932,"mtime":1701783120323,"results":"92","hashOfConfig":"67"},{"size":263,"mtime":1701783120323,"results":"93","hashOfConfig":"67"},{"size":7751,"mtime":1701783120323,"results":"94","hashOfConfig":"67"},{"size":1767,"mtime":1701783120323,"results":"95","hashOfConfig":"67"},{"size":2112,"mtime":1701783120323,"results":"96","hashOfConfig":"67"},{"size":1632,"mtime":1701783120323,"results":"97","hashOfConfig":"67"},{"size":5380,"mtime":1701783120323,"results":"98","hashOfConfig":"67"},{"size":561,"mtime":1701783120323,"results":"99","hashOfConfig":"67"},{"size":9389,"mtime":1701783120323,"results":"100","hashOfConfig":"67"},{"size":5365,"mtime":1701783120323,"results":"101","hashOfConfig":"67"},{"size":37,"mtime":1701783120324,"results":"102","hashOfConfig":"67"},{"size":2796,"mtime":1701783120324,"results":"103","hashOfConfig":"67"},{"size":267,"mtime":1701783120324,"results":"104","hashOfConfig":"67"},{"size":730,"mtime":1701783120324,"results":"105","hashOfConfig":"67"},{"size":599,"mtime":1701783120324,"results":"106","hashOfConfig":"67"},{"size":245,"mtime":1701783120325,"results":"107","hashOfConfig":"67"},{"size":4328,"mtime":1701783120325,"results":"108","hashOfConfig":"67"},{"size":3622,"mtime":1701783120325,"results":"109","hashOfConfig":"67"},{"size":1743,"mtime":1701783120325,"results":"110","hashOfConfig":"67"},{"size":5094,"mtime":1701783120325,"results":"111","hashOfConfig":"67"},{"size":133,"mtime":1701783120325,"results":"112","hashOfConfig":"67"},{"size":467,"mtime":1701783120325,"results":"113","hashOfConfig":"67"},{"size":40,"mtime":1701783120325,"results":"114","hashOfConfig":"67"},{"size":1143,"mtime":1701783120325,"results":"115","hashOfConfig":"67"},{"size":37,"mtime":1701783120325,"results":"116","hashOfConfig":"67"},{"size":1316,"mtime":1701783120325,"results":"117","hashOfConfig":"67"},{"size":2400,"mtime":1701783120325,"results":"118","hashOfConfig":"67"},{"size":3667,"mtime":1701783120325,"results":"119","hashOfConfig":"67"},{"size":3567,"mtime":1701783120325,"results":"120","hashOfConfig":"67"},{"size":507,"mtime":1701783120325,"results":"121","hashOfConfig":"67"},{"size":1365,"mtime":1701783120326,"results":"122","hashOfConfig":"67"},{"size":38,"mtime":1701783120326,"results":"123","hashOfConfig":"67"},{"size":993,"mtime":1701783120326,"results":"124","hashOfConfig":"67"},{"size":38,"mtime":1701783120326,"results":"125","hashOfConfig":"67"},{"size":553,"mtime":1701783121008,"results":"126","hashOfConfig":"67"},{"size":254,"mtime":1701783121008,"results":"127","hashOfConfig":"67"},{"size":1082,"mtime":1701783121008,"results":"128","hashOfConfig":"67"},{"size":641,"mtime":1701783121010,"results":"129","hashOfConfig":"67"},{"size":375,"mtime":1701783121010,"results":"130","hashOfConfig":"67"},{"size":246,"mtime":1701783121010,"results":"131","hashOfConfig":"67"},{"filePath":"132","messages":"133","suppressedMessages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"fo3fli",{"filePath":"135","messages":"136","suppressedMessages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138"},{"filePath":"139","messages":"140","suppressedMessages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"142","messages":"143","suppressedMessages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"145","messages":"146","suppressedMessages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"148","messages":"149","suppressedMessages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"151","messages":"152","suppressedMessages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154"},{"filePath":"155","messages":"156","suppressedMessages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"158","messages":"159","suppressedMessages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"161","messages":"162","suppressedMessages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"164","messages":"165","suppressedMessages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"167","messages":"168","suppressedMessages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"170","messages":"171","suppressedMessages":"172","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173"},{"filePath":"174","messages":"175","suppressedMessages":"176","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177"},{"filePath":"178","messages":"179","suppressedMessages":"180","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"181","messages":"182","suppressedMessages":"183","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184"},{"filePath":"185","messages":"186","suppressedMessages":"187","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"188","messages":"189","suppressedMessages":"190","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"191","messages":"192","suppressedMessages":"193","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"194","messages":"195","suppressedMessages":"196","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"197","messages":"198","suppressedMessages":"199","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"200","messages":"201","suppressedMessages":"202","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"203","messages":"204","suppressedMessages":"205","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"206","messages":"207","suppressedMessages":"208","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"209","messages":"210","suppressedMessages":"211","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"212","messages":"213","suppressedMessages":"214","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"215","messages":"216","suppressedMessages":"217","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"218","messages":"219","suppressedMessages":"220","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"221"},{"filePath":"222","messages":"223","suppressedMessages":"224","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"225","messages":"226","suppressedMessages":"227","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"228","messages":"229","suppressedMessages":"230","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"231","messages":"232","suppressedMessages":"233","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"234","messages":"235","suppressedMessages":"236","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"237","messages":"238","suppressedMessages":"239","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"240","messages":"241","suppressedMessages":"242","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"243","messages":"244","suppressedMessages":"245","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"246","messages":"247","suppressedMessages":"248","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"249","messages":"250","suppressedMessages":"251","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"252","messages":"253","suppressedMessages":"254","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"255","messages":"256","suppressedMessages":"257","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"258","messages":"259","suppressedMessages":"260","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"261","messages":"262","suppressedMessages":"263","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"264"},{"filePath":"265","messages":"266","suppressedMessages":"267","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"268","messages":"269","suppressedMessages":"270","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"271","messages":"272","suppressedMessages":"273","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"274","messages":"275","suppressedMessages":"276","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"277","messages":"278","suppressedMessages":"279","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"280","messages":"281","suppressedMessages":"282","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"283","messages":"284","suppressedMessages":"285","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"286","messages":"287","suppressedMessages":"288","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"289","messages":"290","suppressedMessages":"291","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"292","messages":"293","suppressedMessages":"294","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"295","messages":"296","suppressedMessages":"297","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"298","messages":"299","suppressedMessages":"300","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"301","messages":"302","suppressedMessages":"303","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"304","messages":"305","suppressedMessages":"306","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"307","messages":"308","suppressedMessages":"309","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"310","messages":"311","suppressedMessages":"312","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"313","messages":"314","suppressedMessages":"315","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"316","messages":"317","suppressedMessages":"318","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"319"},{"filePath":"320","messages":"321","suppressedMessages":"322","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"323","messages":"324","suppressedMessages":"325","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"326","messages":"327","suppressedMessages":"328","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"329","messages":"330","suppressedMessages":"331","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"332","messages":"333","suppressedMessages":"334","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/rulz-ai/Rulz-AI/pages/_app.tsx",[],[],"/Users/rulz-ai/Rulz-AI/pages/_document.tsx",["335"],[],"import { DocumentProps, Head, Html, Main, NextScript } from 'next/document';\r\n\r\nimport i18nextConfig from '../next-i18next.config';\r\n\r\ntype Props = DocumentProps & {\r\n  // add custom document props\r\n};\r\n\r\nexport default function Document(props: Props) {\r\n  const currentLocale =\r\n    props.__NEXT_DATA__.locale ?? i18nextConfig.i18n.defaultLocale;\r\n  return (\r\n    <Html lang={currentLocale} dir=\"ltr\">\r\n      <Head>\r\n        <script\r\n          data-project-id=\"zbg1X0OKdOMMBN6usHo9ABdkK5whBbMcuShOTsLv\"\r\n          data-is-production-environment=\"false\"\r\n          src=\"https://snippet.meticulous.ai/v1/meticulous.js\"\r\n        />\r\n        <meta name=\"apple-mobile-web-app-capable\" content=\"yes\" />\r\n        <meta name=\"apple-mobile-web-app-title\" content=\"RULZ-AI\" />\r\n      </Head>\r\n      <body>\r\n        <Main />\r\n        <NextScript />\r\n      </body>\r\n    </Html>\r\n  );\r\n}\r\n","/Users/rulz-ai/Rulz-AI/pages/api/chat.ts",[],[],"/Users/rulz-ai/Rulz-AI/pages/api/google.ts",[],[],"/Users/rulz-ai/Rulz-AI/pages/api/home/home.context.tsx",[],[],"/Users/rulz-ai/Rulz-AI/pages/api/home/home.state.tsx",[],[],"/Users/rulz-ai/Rulz-AI/pages/api/home/home.tsx",["336","337","338"],[],"import { useEffect, useRef, useState } from 'react';\r\nimport { useQuery } from 'react-query';\r\n\r\nimport { GetServerSideProps } from 'next';\r\nimport { useTranslation } from 'next-i18next';\r\nimport { serverSideTranslations } from 'next-i18next/serverSideTranslations';\r\nimport Head from 'next/head';\r\n\r\nimport { useCreateReducer } from '@/hooks/useCreateReducer';\r\n\r\nimport useErrorService from '@/services/errorService';\r\nimport useApiService from '@/services/useApiService';\r\n\r\nimport {\r\n  cleanConversationHistory,\r\n  cleanSelectedConversation,\r\n} from '@/utils/app/clean';\r\nimport { DEFAULT_SYSTEM_PROMPT, DEFAULT_TEMPERATURE } from '@/utils/app/const';\r\nimport {\r\n  saveConversation,\r\n  saveConversations,\r\n  updateConversation,\r\n} from '@/utils/app/conversation';\r\nimport { saveFolders } from '@/utils/app/folders';\r\nimport { savePrompts } from '@/utils/app/prompts';\r\nimport { getSettings } from '@/utils/app/settings';\r\n\r\nimport { Conversation } from '@/types/chat';\r\nimport { KeyValuePair } from '@/types/data';\r\nimport { FolderInterface, FolderType } from '@/types/folder';\r\nimport { OpenAIModelID, OpenAIModels, fallbackModelID } from '@/types/openai';\r\nimport { Prompt } from '@/types/prompt';\r\n\r\nimport { Chat } from '@/components/Chat/Chat';\r\nimport { Chatbar } from '@/components/Chatbar/Chatbar';\r\nimport { Navbar } from '@/components/Mobile/Navbar';\r\nimport Promptbar from '@/components/Promptbar';\r\n\r\nimport HomeContext from './home.context';\r\nimport { HomeInitialState, initialState } from './home.state';\r\n\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\ninterface Props {\r\n  serverSideApiKeyIsSet: boolean;\r\n  serverSidePluginKeysSet: boolean;\r\n  defaultModelId: OpenAIModelID;\r\n}\r\n\r\nconst Home = ({\r\n  serverSideApiKeyIsSet,\r\n  serverSidePluginKeysSet,\r\n  defaultModelId,\r\n}: Props) => {\r\n  const { t } = useTranslation('chat');\r\n  const { getModels } = useApiService();\r\n  const { getModelsError } = useErrorService();\r\n  const [initialRender, setInitialRender] = useState<boolean>(true);\r\n\r\n  const contextValue = useCreateReducer<HomeInitialState>({\r\n    initialState,\r\n  });\r\n\r\n  const {\r\n    state: {\r\n      apiKey,\r\n      lightMode,\r\n      folders,\r\n      conversations,\r\n      selectedConversation,\r\n      prompts,\r\n      temperature,\r\n    },\r\n    dispatch,\r\n  } = contextValue;\r\n\r\n  const stopConversationRef = useRef<boolean>(false);\r\n\r\n  const { data, error, refetch } = useQuery(\r\n    ['GetModels', apiKey, serverSideApiKeyIsSet],\r\n    ({ signal }) => {\r\n      if (!apiKey && !serverSideApiKeyIsSet) return null;\r\n\r\n      return getModels(\r\n        {\r\n          key: apiKey,\r\n        },\r\n        signal,\r\n      );\r\n    },\r\n    { enabled: true, refetchOnMount: false },\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (data) dispatch({ field: 'models', value: data });\r\n  }, [data, dispatch]);\r\n\r\n  useEffect(() => {\r\n    dispatch({ field: 'modelError', value: getModelsError(error) });\r\n  }, [dispatch, error, getModelsError]);\r\n\r\n  // FETCH MODELS ----------------------------------------------\r\n\r\n  const handleSelectConversation = (conversation: Conversation) => {\r\n    dispatch({\r\n      field: 'selectedConversation',\r\n      value: conversation,\r\n    });\r\n\r\n    saveConversation(conversation);\r\n  };\r\n\r\n  // FOLDER OPERATIONS  --------------------------------------------\r\n\r\n  const handleCreateFolder = (name: string, type: FolderType) => {\r\n    const newFolder: FolderInterface = {\r\n      id: uuidv4(),\r\n      name,\r\n      type,\r\n    };\r\n\r\n    const updatedFolders = [...folders, newFolder];\r\n\r\n    dispatch({ field: 'folders', value: updatedFolders });\r\n    saveFolders(updatedFolders);\r\n  };\r\n\r\n  const handleDeleteFolder = (folderId: string) => {\r\n    const updatedFolders = folders.filter((f) => f.id !== folderId);\r\n    dispatch({ field: 'folders', value: updatedFolders });\r\n    saveFolders(updatedFolders);\r\n\r\n    const updatedConversations: Conversation[] = conversations.map((c) => {\r\n      if (c.folderId === folderId) {\r\n        return {\r\n          ...c,\r\n          folderId: null,\r\n        };\r\n      }\r\n\r\n      return c;\r\n    });\r\n\r\n    dispatch({ field: 'conversations', value: updatedConversations });\r\n    saveConversations(updatedConversations);\r\n\r\n    const updatedPrompts: Prompt[] = prompts.map((p) => {\r\n      if (p.folderId === folderId) {\r\n        return {\r\n          ...p,\r\n          folderId: null,\r\n        };\r\n      }\r\n\r\n      return p;\r\n    });\r\n\r\n    dispatch({ field: 'prompts', value: updatedPrompts });\r\n    savePrompts(updatedPrompts);\r\n  };\r\n\r\n  const handleUpdateFolder = (folderId: string, name: string) => {\r\n    const updatedFolders = folders.map((f) => {\r\n      if (f.id === folderId) {\r\n        return {\r\n          ...f,\r\n          name,\r\n        };\r\n      }\r\n\r\n      return f;\r\n    });\r\n\r\n    dispatch({ field: 'folders', value: updatedFolders });\r\n\r\n    saveFolders(updatedFolders);\r\n  };\r\n\r\n  // CONVERSATION OPERATIONS  --------------------------------------------\r\n\r\n  const handleNewConversation = () => {\r\n    const lastConversation = conversations[conversations.length - 1];\r\n\r\n    const newConversation: Conversation = {\r\n      id: uuidv4(),\r\n      name: t('New Conversation'),\r\n      messages: [],\r\n      model: lastConversation?.model || {\r\n        id: OpenAIModels[defaultModelId].id,\r\n        name: OpenAIModels[defaultModelId].name,\r\n        maxLength: OpenAIModels[defaultModelId].maxLength,\r\n        tokenLimit: OpenAIModels[defaultModelId].tokenLimit,\r\n      },\r\n      prompt: DEFAULT_SYSTEM_PROMPT,\r\n      temperature: lastConversation?.temperature ?? DEFAULT_TEMPERATURE,\r\n      folderId: null,\r\n    };\r\n\r\n    const updatedConversations = [...conversations, newConversation];\r\n\r\n    dispatch({ field: 'selectedConversation', value: newConversation });\r\n    dispatch({ field: 'conversations', value: updatedConversations });\r\n\r\n    saveConversation(newConversation);\r\n    saveConversations(updatedConversations);\r\n\r\n    dispatch({ field: 'loading', value: false });\r\n  };\r\n\r\n  const handleUpdateConversation = (\r\n    conversation: Conversation,\r\n    data: KeyValuePair,\r\n  ) => {\r\n    const updatedConversation = {\r\n      ...conversation,\r\n      [data.key]: data.value,\r\n    };\r\n\r\n    const { single, all } = updateConversation(\r\n      updatedConversation,\r\n      conversations,\r\n    );\r\n\r\n    dispatch({ field: 'selectedConversation', value: single });\r\n    dispatch({ field: 'conversations', value: all });\r\n  };\r\n\r\n  // EFFECTS  --------------------------------------------\r\n\r\n  useEffect(() => {\r\n    if (window.innerWidth < 640) {\r\n      dispatch({ field: 'showChatbar', value: false });\r\n    }\r\n  }, [selectedConversation]);\r\n\r\n  useEffect(() => {\r\n    defaultModelId &&\r\n      dispatch({ field: 'defaultModelId', value: defaultModelId });\r\n    serverSideApiKeyIsSet &&\r\n      dispatch({\r\n        field: 'serverSideApiKeyIsSet',\r\n        value: serverSideApiKeyIsSet,\r\n      });\r\n    serverSidePluginKeysSet &&\r\n      dispatch({\r\n        field: 'serverSidePluginKeysSet',\r\n        value: serverSidePluginKeysSet,\r\n      });\r\n  }, [defaultModelId, serverSideApiKeyIsSet, serverSidePluginKeysSet]);\r\n\r\n  // ON LOAD --------------------------------------------\r\n\r\n  useEffect(() => {\r\n    const settings = getSettings();\r\n    if (settings.theme) {\r\n      dispatch({\r\n        field: 'lightMode',\r\n        value: settings.theme,\r\n      });\r\n    }\r\n\r\n    const apiKey = localStorage.getItem('apiKey');\r\n\r\n    if (serverSideApiKeyIsSet) {\r\n      dispatch({ field: 'apiKey', value: '' });\r\n\r\n      localStorage.removeItem('apiKey');\r\n    } else if (apiKey) {\r\n      dispatch({ field: 'apiKey', value: apiKey });\r\n    }\r\n\r\n    const pluginKeys = localStorage.getItem('pluginKeys');\r\n    if (serverSidePluginKeysSet) {\r\n      dispatch({ field: 'pluginKeys', value: [] });\r\n      localStorage.removeItem('pluginKeys');\r\n    } else if (pluginKeys) {\r\n      dispatch({ field: 'pluginKeys', value: pluginKeys });\r\n    }\r\n\r\n    if (window.innerWidth < 640) {\r\n      dispatch({ field: 'showChatbar', value: false });\r\n      dispatch({ field: 'showPromptbar', value: false });\r\n    }\r\n\r\n    const showChatbar = localStorage.getItem('showChatbar');\r\n    if (showChatbar) {\r\n      dispatch({ field: 'showChatbar', value: showChatbar === 'true' });\r\n    }\r\n\r\n    const showPromptbar = localStorage.getItem('showPromptbar');\r\n    if (showPromptbar) {\r\n      dispatch({ field: 'showPromptbar', value: showPromptbar === 'true' });\r\n    }\r\n\r\n    const folders = localStorage.getItem('folders');\r\n    if (folders) {\r\n      dispatch({ field: 'folders', value: JSON.parse(folders) });\r\n    }\r\n\r\n    const prompts = localStorage.getItem('prompts');\r\n    if (prompts) {\r\n      dispatch({ field: 'prompts', value: JSON.parse(prompts) });\r\n    }\r\n\r\n    const conversationHistory = localStorage.getItem('conversationHistory');\r\n    if (conversationHistory) {\r\n      const parsedConversationHistory: Conversation[] =\r\n        JSON.parse(conversationHistory);\r\n      const cleanedConversationHistory = cleanConversationHistory(\r\n        parsedConversationHistory,\r\n      );\r\n\r\n      dispatch({ field: 'conversations', value: cleanedConversationHistory });\r\n    }\r\n\r\n    const selectedConversation = localStorage.getItem('selectedConversation');\r\n    if (selectedConversation) {\r\n      const parsedSelectedConversation: Conversation =\r\n        JSON.parse(selectedConversation);\r\n      const cleanedSelectedConversation = cleanSelectedConversation(\r\n        parsedSelectedConversation,\r\n      );\r\n\r\n      dispatch({\r\n        field: 'selectedConversation',\r\n        value: cleanedSelectedConversation,\r\n      });\r\n    } else {\r\n      const lastConversation = conversations[conversations.length - 1];\r\n      dispatch({\r\n        field: 'selectedConversation',\r\n        value: {\r\n          id: uuidv4(),\r\n          name: t('New Conversation'),\r\n          messages: [],\r\n          model: OpenAIModels[defaultModelId],\r\n          prompt: DEFAULT_SYSTEM_PROMPT,\r\n          temperature: lastConversation?.temperature ?? DEFAULT_TEMPERATURE,\r\n          folderId: null,\r\n        },\r\n      });\r\n    }\r\n  }, [\r\n    defaultModelId,\r\n    dispatch,\r\n    serverSideApiKeyIsSet,\r\n    serverSidePluginKeysSet,\r\n  ]);\r\n\r\n  return (\r\n    <HomeContext.Provider\r\n      value={{\r\n        ...contextValue,\r\n        handleNewConversation,\r\n        handleCreateFolder,\r\n        handleDeleteFolder,\r\n        handleUpdateFolder,\r\n        handleSelectConversation,\r\n        handleUpdateConversation,\r\n      }}\r\n    >\r\n      <Head>\r\n        <title>Rulz-AI</title>\r\n        <meta name=\"description\" content=\"Rulz-AI is a Powerful Language Model.\" />\r\n        <meta\r\n          name=\"viewport\"\r\n          content=\"height=device-height ,width=device-width, initial-scale=1, user-scalable=no\"\r\n        />\r\n        <link rel=\"icon\" href=\"/IconRobot.ico\" />\r\n      </Head>\r\n      {selectedConversation && (\r\n        <main\r\n          className={`flex h-screen w-screen flex-col text-sm text-white dark:text-white ${lightMode}`}\r\n        >\r\n          <div className=\"fixed top-0 w-full sm:hidden\">\r\n            <Navbar\r\n              selectedConversation={selectedConversation}\r\n              onNewConversation={handleNewConversation}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"flex h-full w-full pt-[48px] sm:pt-0\">\r\n            <Chatbar />\r\n\r\n            <div className=\"flex flex-1\">\r\n              <Chat stopConversationRef={stopConversationRef} />\r\n            </div>\r\n\r\n            <Promptbar />\r\n          </div>\r\n        </main>\r\n      )}\r\n    </HomeContext.Provider>\r\n  );\r\n};\r\nexport default Home;\r\n\r\nexport const getServerSideProps: GetServerSideProps = async ({ locale }) => {\r\n  const defaultModelId =\r\n    (process.env.DEFAULT_MODEL &&\r\n      Object.values(OpenAIModelID).includes(\r\n        process.env.DEFAULT_MODEL as OpenAIModelID,\r\n      ) &&\r\n      process.env.DEFAULT_MODEL) ||\r\n    fallbackModelID;\r\n\r\n  let serverSidePluginKeysSet = false;\r\n\r\n  const googleApiKey = process.env.GOOGLE_API_KEY;\r\n  const googleCSEId = process.env.GOOGLE_CSE_ID;\r\n\r\n  if (googleApiKey && googleCSEId) {\r\n    serverSidePluginKeysSet = true;\r\n  }\r\n\r\n  return {\r\n    props: {\r\n      serverSideApiKeyIsSet: !!process.env.OPENAI_API_KEY,\r\n      defaultModelId,\r\n      serverSidePluginKeysSet,\r\n      ...(await serverSideTranslations(locale ?? 'en', [\r\n        'common',\r\n        'chat',\r\n        'sidebar',\r\n        'markdown',\r\n        'promptbar',\r\n        'settings',\r\n      ])),\r\n    },\r\n  };\r\n};\r\n","/Users/rulz-ai/Rulz-AI/pages/api/home/index.ts",[],[],"/Users/rulz-ai/Rulz-AI/pages/api/models.ts",[],[],"/Users/rulz-ai/Rulz-AI/pages/index.tsx",[],[],"/Users/rulz-ai/Rulz-AI/components/Buttons/SidebarActionButton/SidebarActionButton.tsx",[],[],"/Users/rulz-ai/Rulz-AI/components/Buttons/SidebarActionButton/index.ts",[],[],"/Users/rulz-ai/Rulz-AI/components/Chat/Chat.tsx",["339"],[],"import { IconClearAll, IconSettings } from '@tabler/icons-react';\r\nimport {\r\n  MutableRefObject,\r\n  memo,\r\n  useCallback,\r\n  useContext,\r\n  useEffect,\r\n  useRef,\r\n  useState,\r\n} from 'react';\r\nimport toast from 'react-hot-toast';\r\n\r\nimport { useTranslation } from 'next-i18next';\r\n\r\nimport { getEndpoint } from '@/utils/app/api';\r\nimport {\r\n  saveConversation,\r\n  saveConversations,\r\n  updateConversation,\r\n} from '@/utils/app/conversation';\r\nimport { throttle } from '@/utils/data/throttle';\r\n\r\nimport { ChatBody, Conversation, Message } from '@/types/chat';\r\nimport { Plugin } from '@/types/plugin';\r\n\r\nimport HomeContext from '@/pages/api/home/home.context';\r\n\r\nimport Spinner from '../Spinner';\r\nimport { ChatInput } from './ChatInput';\r\nimport { ChatLoader } from './ChatLoader';\r\nimport { ErrorMessageDiv } from './ErrorMessageDiv';\r\nimport { ModelSelect } from './ModelSelect';\r\nimport { SystemPrompt } from './SystemPrompt';\r\nimport { TemperatureSlider } from './Temperature';\r\nimport { MemoizedChatMessage } from './MemoizedChatMessage';\r\n\r\ninterface Props {\r\n  stopConversationRef: MutableRefObject<boolean>;\r\n}\r\n\r\nexport const Chat = memo(({ stopConversationRef }: Props) => {\r\n  const { t } = useTranslation('chat');\r\n\r\n  const {\r\n    state: {\r\n      selectedConversation,\r\n      conversations,\r\n      models,\r\n      apiKey,\r\n      pluginKeys,\r\n      serverSideApiKeyIsSet,\r\n      messageIsStreaming,\r\n      modelError,\r\n      loading,\r\n      prompts,\r\n    },\r\n    handleUpdateConversation,\r\n    dispatch: homeDispatch,\r\n  } = useContext(HomeContext);\r\n\r\n  const [currentMessage, setCurrentMessage] = useState<Message>();\r\n  const [autoScrollEnabled, setAutoScrollEnabled] = useState<boolean>(true);\r\n  const [showSettings, setShowSettings] = useState<boolean>(false);\r\n  const [showScrollDownButton, setShowScrollDownButton] =\r\n    useState<boolean>(false);\r\n\r\n  const messagesEndRef = useRef<HTMLDivElement>(null);\r\n  const chatContainerRef = useRef<HTMLDivElement>(null);\r\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\r\n\r\n  const handleSend = useCallback(\r\n    async (message: Message, deleteCount = 0, plugin: Plugin | null = null) => {\r\n      if (selectedConversation) {\r\n        let updatedConversation: Conversation;\r\n        if (deleteCount) {\r\n          const updatedMessages = [...selectedConversation.messages];\r\n          for (let i = 0; i < deleteCount; i++) {\r\n            updatedMessages.pop();\r\n          }\r\n          updatedConversation = {\r\n            ...selectedConversation,\r\n            messages: [...updatedMessages, message],\r\n          };\r\n        } else {\r\n          updatedConversation = {\r\n            ...selectedConversation,\r\n            messages: [...selectedConversation.messages, message],\r\n          };\r\n        }\r\n        homeDispatch({\r\n          field: 'selectedConversation',\r\n          value: updatedConversation,\r\n        });\r\n        homeDispatch({ field: 'loading', value: true });\r\n        homeDispatch({ field: 'messageIsStreaming', value: true });\r\n        const chatBody: ChatBody = {\r\n          model: updatedConversation.model,\r\n          messages: updatedConversation.messages,\r\n          key: apiKey,\r\n          prompt: updatedConversation.prompt,\r\n          temperature: updatedConversation.temperature,\r\n        };\r\n        const endpoint = getEndpoint(plugin);\r\n        let body;\r\n        if (!plugin) {\r\n          body = JSON.stringify(chatBody);\r\n        } else {\r\n          body = JSON.stringify({\r\n            ...chatBody,\r\n            googleAPIKey: pluginKeys\r\n              .find((key) => key.pluginId === 'google-search')\r\n              ?.requiredKeys.find((key) => key.key === 'GOOGLE_API_KEY')?.value,\r\n            googleCSEId: pluginKeys\r\n              .find((key) => key.pluginId === 'google-search')\r\n              ?.requiredKeys.find((key) => key.key === 'GOOGLE_CSE_ID')?.value,\r\n          });\r\n        }\r\n        const controller = new AbortController();\r\n        const response = await fetch(endpoint, {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          signal: controller.signal,\r\n          body,\r\n        });\r\n        if (!response.ok) {\r\n          homeDispatch({ field: 'loading', value: false });\r\n          homeDispatch({ field: 'messageIsStreaming', value: false });\r\n          toast.error(response.statusText);\r\n          return;\r\n        }\r\n        const data = response.body;\r\n        if (!data) {\r\n          homeDispatch({ field: 'loading', value: false });\r\n          homeDispatch({ field: 'messageIsStreaming', value: false });\r\n          return;\r\n        }\r\n        if (!plugin) {\r\n          if (updatedConversation.messages.length === 1) {\r\n            const { content } = message;\r\n            const customName =\r\n              content.length > 30 ? content.substring(0, 30) + '...' : content;\r\n            updatedConversation = {\r\n              ...updatedConversation,\r\n              name: customName,\r\n            };\r\n          }\r\n          homeDispatch({ field: 'loading', value: false });\r\n          const reader = data.getReader();\r\n          const decoder = new TextDecoder();\r\n          let done = false;\r\n          let isFirst = true;\r\n          let text = '';\r\n          while (!done) {\r\n            if (stopConversationRef.current === true) {\r\n              controller.abort();\r\n              done = true;\r\n              break;\r\n            }\r\n            const { value, done: doneReading } = await reader.read();\r\n            done = doneReading;\r\n            const chunkValue = decoder.decode(value);\r\n            text += chunkValue;\r\n            if (isFirst) {\r\n              isFirst = false;\r\n              const updatedMessages: Message[] = [\r\n                ...updatedConversation.messages,\r\n                { role: 'assistant', content: chunkValue },\r\n              ];\r\n              updatedConversation = {\r\n                ...updatedConversation,\r\n                messages: updatedMessages,\r\n              };\r\n              homeDispatch({\r\n                field: 'selectedConversation',\r\n                value: updatedConversation,\r\n              });\r\n            } else {\r\n              const updatedMessages: Message[] =\r\n                updatedConversation.messages.map((message, index) => {\r\n                  if (index === updatedConversation.messages.length - 1) {\r\n                    return {\r\n                      ...message,\r\n                      content: text,\r\n                    };\r\n                  }\r\n                  return message;\r\n                });\r\n              updatedConversation = {\r\n                ...updatedConversation,\r\n                messages: updatedMessages,\r\n              };\r\n              homeDispatch({\r\n                field: 'selectedConversation',\r\n                value: updatedConversation,\r\n              });\r\n            }\r\n          }\r\n          saveConversation(updatedConversation);\r\n          const updatedConversations: Conversation[] = conversations.map(\r\n            (conversation) => {\r\n              if (conversation.id === selectedConversation.id) {\r\n                return updatedConversation;\r\n              }\r\n              return conversation;\r\n            },\r\n          );\r\n          if (updatedConversations.length === 0) {\r\n            updatedConversations.push(updatedConversation);\r\n          }\r\n          homeDispatch({ field: 'conversations', value: updatedConversations });\r\n          saveConversations(updatedConversations);\r\n          homeDispatch({ field: 'messageIsStreaming', value: false });\r\n        } else {\r\n          const { answer } = await response.json();\r\n          const updatedMessages: Message[] = [\r\n            ...updatedConversation.messages,\r\n            { role: 'assistant', content: answer },\r\n          ];\r\n          updatedConversation = {\r\n            ...updatedConversation,\r\n            messages: updatedMessages,\r\n          };\r\n          homeDispatch({\r\n            field: 'selectedConversation',\r\n            value: updateConversation,\r\n          });\r\n          saveConversation(updatedConversation);\r\n          const updatedConversations: Conversation[] = conversations.map(\r\n            (conversation) => {\r\n              if (conversation.id === selectedConversation.id) {\r\n                return updatedConversation;\r\n              }\r\n              return conversation;\r\n            },\r\n          );\r\n          if (updatedConversations.length === 0) {\r\n            updatedConversations.push(updatedConversation);\r\n          }\r\n          homeDispatch({ field: 'conversations', value: updatedConversations });\r\n          saveConversations(updatedConversations);\r\n          homeDispatch({ field: 'loading', value: false });\r\n          homeDispatch({ field: 'messageIsStreaming', value: false });\r\n        }\r\n      }\r\n    },\r\n    [\r\n      apiKey,\r\n      conversations,\r\n      pluginKeys,\r\n      selectedConversation,\r\n      stopConversationRef,\r\n    ],\r\n  );\r\n\r\n  const scrollToBottom = useCallback(() => {\r\n    if (autoScrollEnabled) {\r\n      messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n      textareaRef.current?.focus();\r\n    }\r\n  }, [autoScrollEnabled]);\r\n\r\n  const handleScroll = () => {\r\n    if (chatContainerRef.current) {\r\n      const { scrollTop, scrollHeight, clientHeight } =\r\n        chatContainerRef.current;\r\n      const bottomTolerance = 30;\r\n\r\n      if (scrollTop + clientHeight < scrollHeight - bottomTolerance) {\r\n        setAutoScrollEnabled(false);\r\n        setShowScrollDownButton(true);\r\n      } else {\r\n        setAutoScrollEnabled(true);\r\n        setShowScrollDownButton(false);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleScrollDown = () => {\r\n    chatContainerRef.current?.scrollTo({\r\n      top: chatContainerRef.current.scrollHeight,\r\n      behavior: 'smooth',\r\n    });\r\n  };\r\n\r\n  const handleSettings = () => {\r\n    setShowSettings(!showSettings);\r\n  };\r\n\r\n  const onClearAll = () => {\r\n    if (\r\n      confirm(t<string>('Are you sure you want to clear all messages?')) &&\r\n      selectedConversation\r\n    ) {\r\n      handleUpdateConversation(selectedConversation, {\r\n        key: 'messages',\r\n        value: [],\r\n      });\r\n    }\r\n  };\r\n\r\n  const scrollDown = () => {\r\n    if (autoScrollEnabled) {\r\n      messagesEndRef.current?.scrollIntoView(true);\r\n    }\r\n  };\r\n  const throttledScrollDown = throttle(scrollDown, 250);\r\n\r\n  // useEffect(() => {\r\n  //   console.log('currentMessage', currentMessage);\r\n  //   if (currentMessage) {\r\n  //     handleSend(currentMessage);\r\n  //     homeDispatch({ field: 'currentMessage', value: undefined });\r\n  //   }\r\n  // }, [currentMessage]);\r\n\r\n  useEffect(() => {\r\n    throttledScrollDown();\r\n    selectedConversation &&\r\n      setCurrentMessage(\r\n        selectedConversation.messages[selectedConversation.messages.length - 2],\r\n      );\r\n  }, [selectedConversation, throttledScrollDown]);\r\n\r\n  useEffect(() => {\r\n    const observer = new IntersectionObserver(\r\n      ([entry]) => {\r\n        setAutoScrollEnabled(entry.isIntersecting);\r\n        if (entry.isIntersecting) {\r\n          textareaRef.current?.focus();\r\n        }\r\n      },\r\n      {\r\n        root: null,\r\n        threshold: 0.5,\r\n      },\r\n    );\r\n    const messagesEndElement = messagesEndRef.current;\r\n    if (messagesEndElement) {\r\n      observer.observe(messagesEndElement);\r\n    }\r\n    return () => {\r\n      if (messagesEndElement) {\r\n        observer.unobserve(messagesEndElement);\r\n      }\r\n    };\r\n  }, [messagesEndRef]);\r\n\r\n  return (\r\n    <div className=\"relative flex-1 overflow-hidden bg-white dark:bg-[#343541]\">\r\n      {!(apiKey || serverSideApiKeyIsSet) ? (\r\n        <div className=\"mx-auto flex h-full w-[300px] flex-col justify-center space-y-6 sm:w-[600px]\">\r\n          <div className=\"text-center text-4xl font-bold text-black dark:text-white\">\r\n            Welcome to Rulz-AI\r\n          </div>\r\n          <div className=\"text-center text-lg text-black dark:text-white\">\r\n            <div className=\"mb-8\">{`Rulz-AI is an open source clone of OpenAI's ChatGPT UI.`}</div>\r\n            <div className=\"mb-2 font-bold\">\r\n              Important: Rulz-AI is 100% unaffiliated with OpenAI.\r\n            </div>\r\n          </div>\r\n          <div className=\"text-center text-gray-500 dark:text-gray-400\">\r\n            <div className=\"mb-15\">\r\n              Rulz-AI allows you to plug in your API key to use this UI with\r\n              their API.\r\n            </div>\r\n            <div className=\"mb-15\">\r\n              It is <span className=\"italic\">only</span> used to communicate\r\n              with their API.\r\n            </div>\r\n            <div className=\"mb-12\">\r\n              {t(\r\n                'Please set your OpenAI API key in the bottom left of the sidebar.',\r\n              )}\r\n            </div>\r\n            <div>\r\n              {t(\"If you don't have an OpenAI API key, you can get one here: \")}\r\n              <a\r\n                href=\"https://platform.openai.com/account/api-keys\"\r\n                target=\"_blank\"\r\n                rel=\"noreferrer\"\r\n                className=\"text-blue-500 hover:underline\"\r\n              >\r\n                openai.com\r\n              </a>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ) : modelError ? (\r\n        <ErrorMessageDiv error={modelError} />\r\n      ) : (\r\n        <>\r\n          <div\r\n            className=\"max-h-full overflow-x-hidden\"\r\n            ref={chatContainerRef}\r\n            onScroll={handleScroll}\r\n          >\r\n            {selectedConversation?.messages.length === 0 ? (\r\n              <>\r\n                <div className=\"mx-auto flex flex-col space-y-5 md:space-y-10 px-3 pt-5 md:pt-12 sm:max-w-[600px]\">\r\n                  <div className=\"text-center text-3xl font-semibold text-gray-800 dark:text-gray-100\">\r\n                    {models.length === 0 ? (\r\n                      <div>\r\n                        <Spinner size=\"25px\" className=\"mx-auto\" />\r\n                      </div>\r\n                    ) : (\r\n                      'RULZ-AI'\r\n                    )}\r\n                  </div>\r\n\r\n                  {models.length > 0 && (\r\n                    <div className=\"flex h-full flex-col space-y-4 rounded-lg border border-neutral-200 p-4 dark:border-neutral-600\">\r\n                      <ModelSelect />\r\n\r\n                      <SystemPrompt\r\n                        conversation={selectedConversation}\r\n                        prompts={prompts}\r\n                        onChangePrompt={(prompt) =>\r\n                          handleUpdateConversation(selectedConversation, {\r\n                            key: 'prompt',\r\n                            value: prompt,\r\n                          })\r\n                        }\r\n                      />\r\n\r\n                      <TemperatureSlider\r\n                        label={t('Temperature')}\r\n                        onChangeTemperature={(temperature) =>\r\n                          handleUpdateConversation(selectedConversation, {\r\n                            key: 'temperature',\r\n                            value: temperature,\r\n                          })\r\n                        }\r\n                      />\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </>\r\n            ) : (\r\n              <>\r\n                <div className=\"sticky top-0 z-10 flex justify-center border border-b-neutral-300 bg-neutral-100 py-2 text-sm text-neutral-500 dark:border-none dark:bg-[#444654] dark:text-neutral-200\">\r\n                  {t('Model')}: {selectedConversation?.model.name} | {t('Temp')}\r\n                  : {selectedConversation?.temperature} |\r\n                  <button\r\n                    className=\"ml-2 cursor-pointer hover:opacity-50\"\r\n                    onClick={handleSettings}\r\n                  >\r\n                    <IconSettings size={18} />\r\n                  </button>\r\n                  <button\r\n                    className=\"ml-2 cursor-pointer hover:opacity-50\"\r\n                    onClick={onClearAll}\r\n                  >\r\n                    <IconClearAll size={18} />\r\n                  </button>\r\n                </div>\r\n                {showSettings && (\r\n                  <div className=\"flex flex-col space-y-10 md:mx-auto md:max-w-xl md:gap-6 md:py-3 md:pt-6 lg:max-w-2xl lg:px-0 xl:max-w-3xl\">\r\n                    <div className=\"flex h-full flex-col space-y-4 border-b border-neutral-200 p-4 dark:border-neutral-600 md:rounded-lg md:border\">\r\n                      <ModelSelect />\r\n                    </div>\r\n                  </div>\r\n                )}\r\n\r\n                {selectedConversation?.messages.map((message, index) => (\r\n                  <MemoizedChatMessage\r\n                    key={index}\r\n                    message={message}\r\n                    messageIndex={index}\r\n                    onEdit={(editedMessage) => {\r\n                      setCurrentMessage(editedMessage);\r\n                      // discard edited message and the ones that come after then resend\r\n                      handleSend(\r\n                        editedMessage,\r\n                        selectedConversation?.messages.length - index,\r\n                      );\r\n                    }}\r\n                  />\r\n                ))}\r\n\r\n                {loading && <ChatLoader />}\r\n\r\n                <div\r\n                  className=\"h-[162px] bg-white dark:bg-[#343541]\"\r\n                  ref={messagesEndRef}\r\n                />\r\n              </>\r\n            )}\r\n          </div>\r\n\r\n          <ChatInput\r\n            stopConversationRef={stopConversationRef}\r\n            textareaRef={textareaRef}\r\n            onSend={(message, plugin) => {\r\n              setCurrentMessage(message);\r\n              handleSend(message, 0, plugin);\r\n            }}\r\n            onScrollDownClick={handleScrollDown}\r\n            onRegenerate={() => {\r\n              if (currentMessage) {\r\n                handleSend(currentMessage, 2, null);\r\n              }\r\n            }}\r\n            showScrollDownButton={showScrollDownButton}\r\n          />\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n});\r\nChat.displayName = 'Chat';\r\n","/Users/rulz-ai/Rulz-AI/components/Chat/ChatInput.tsx",["340"],[],"import {\r\n  IconArrowDown,\r\n  IconBolt,\r\n  IconBrandGoogle,\r\n  IconPlayerStop,\r\n  IconRepeat,\r\n  IconSend,\r\n} from '@tabler/icons-react';\r\nimport {\r\n  KeyboardEvent,\r\n  MutableRefObject,\r\n  useCallback,\r\n  useContext,\r\n  useEffect,\r\n  useRef,\r\n  useState,\r\n} from 'react';\r\n\r\nimport { useTranslation } from 'next-i18next';\r\n\r\nimport { Message } from '@/types/chat';\r\nimport { Plugin } from '@/types/plugin';\r\nimport { Prompt } from '@/types/prompt';\r\n\r\nimport HomeContext from '@/pages/api/home/home.context';\r\n\r\nimport { PluginSelect } from './PluginSelect';\r\nimport { PromptList } from './PromptList';\r\nimport { VariableModal } from './VariableModal';\r\n\r\ninterface Props {\r\n  onSend: (message: Message, plugin: Plugin | null) => void;\r\n  onRegenerate: () => void;\r\n  onScrollDownClick: () => void;\r\n  stopConversationRef: MutableRefObject<boolean>;\r\n  textareaRef: MutableRefObject<HTMLTextAreaElement | null>;\r\n  showScrollDownButton: boolean;\r\n}\r\n\r\nexport const ChatInput = ({\r\n  onSend,\r\n  onRegenerate,\r\n  onScrollDownClick,\r\n  stopConversationRef,\r\n  textareaRef,\r\n  showScrollDownButton,\r\n}: Props) => {\r\n  const { t } = useTranslation('chat');\r\n\r\n  const {\r\n    state: { selectedConversation, messageIsStreaming, prompts },\r\n\r\n    dispatch: homeDispatch,\r\n  } = useContext(HomeContext);\r\n\r\n  const [content, setContent] = useState<string>();\r\n  const [isTyping, setIsTyping] = useState<boolean>(false);\r\n  const [showPromptList, setShowPromptList] = useState(false);\r\n  const [activePromptIndex, setActivePromptIndex] = useState(0);\r\n  const [promptInputValue, setPromptInputValue] = useState('');\r\n  const [variables, setVariables] = useState<string[]>([]);\r\n  const [isModalVisible, setIsModalVisible] = useState(false);\r\n  const [showPluginSelect, setShowPluginSelect] = useState(false);\r\n  const [plugin, setPlugin] = useState<Plugin | null>(null);\r\n\r\n  const promptListRef = useRef<HTMLUListElement | null>(null);\r\n\r\n  const filteredPrompts = prompts.filter((prompt) =>\r\n    prompt.name.toLowerCase().includes(promptInputValue.toLowerCase()),\r\n  );\r\n\r\n  const handleChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\r\n    const value = e.target.value;\r\n    const maxLength = selectedConversation?.model.maxLength;\r\n\r\n    if (maxLength && value.length > maxLength) {\r\n      alert(\r\n        t(\r\n          `Message limit is {{maxLength}} characters. You have entered {{valueLength}} characters.`,\r\n          { maxLength, valueLength: value.length },\r\n        ),\r\n      );\r\n      return;\r\n    }\r\n\r\n    setContent(value);\r\n    updatePromptListVisibility(value);\r\n  };\r\n\r\n  const handleSend = () => {\r\n    if (messageIsStreaming) {\r\n      return;\r\n    }\r\n\r\n    if (!content) {\r\n      alert(t('Please enter a message'));\r\n      return;\r\n    }\r\n\r\n    onSend({ role: 'user', content }, plugin);\r\n    setContent('');\r\n    setPlugin(null);\r\n\r\n    if (window.innerWidth < 640 && textareaRef && textareaRef.current) {\r\n      textareaRef.current.blur();\r\n    }\r\n  };\r\n\r\n  const handleStopConversation = () => {\r\n    stopConversationRef.current = true;\r\n    setTimeout(() => {\r\n      stopConversationRef.current = false;\r\n    }, 1000);\r\n  };\r\n\r\n  const isMobile = () => {\r\n    const userAgent =\r\n      typeof window.navigator === 'undefined' ? '' : navigator.userAgent;\r\n    const mobileRegex =\r\n      /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini|Mobile|mobile|CriOS/i;\r\n    return mobileRegex.test(userAgent);\r\n  };\r\n\r\n  const handleInitModal = () => {\r\n    const selectedPrompt = filteredPrompts[activePromptIndex];\r\n    if (selectedPrompt) {\r\n      setContent((prevContent) => {\r\n        const newContent = prevContent?.replace(\r\n          /\\/\\w*$/,\r\n          selectedPrompt.content,\r\n        );\r\n        return newContent;\r\n      });\r\n      handlePromptSelect(selectedPrompt);\r\n    }\r\n    setShowPromptList(false);\r\n  };\r\n\r\n  const handleKeyDown = (e: KeyboardEvent<HTMLTextAreaElement>) => {\r\n    if (showPromptList) {\r\n      if (e.key === 'ArrowDown') {\r\n        e.preventDefault();\r\n        setActivePromptIndex((prevIndex) =>\r\n          prevIndex < prompts.length - 1 ? prevIndex + 1 : prevIndex,\r\n        );\r\n      } else if (e.key === 'ArrowUp') {\r\n        e.preventDefault();\r\n        setActivePromptIndex((prevIndex) =>\r\n          prevIndex > 0 ? prevIndex - 1 : prevIndex,\r\n        );\r\n      } else if (e.key === 'Tab') {\r\n        e.preventDefault();\r\n        setActivePromptIndex((prevIndex) =>\r\n          prevIndex < prompts.length - 1 ? prevIndex + 1 : 0,\r\n        );\r\n      } else if (e.key === 'Enter') {\r\n        e.preventDefault();\r\n        handleInitModal();\r\n      } else if (e.key === 'Escape') {\r\n        e.preventDefault();\r\n        setShowPromptList(false);\r\n      } else {\r\n        setActivePromptIndex(0);\r\n      }\r\n    } else if (e.key === 'Enter' && !isTyping && !isMobile() && !e.shiftKey) {\r\n      e.preventDefault();\r\n      handleSend();\r\n    } else if (e.key === '/' && e.metaKey) {\r\n      e.preventDefault();\r\n      setShowPluginSelect(!showPluginSelect);\r\n    }\r\n  };\r\n\r\n  const parseVariables = (content: string) => {\r\n    const regex = /{{(.*?)}}/g;\r\n    const foundVariables = [];\r\n    let match;\r\n\r\n    while ((match = regex.exec(content)) !== null) {\r\n      foundVariables.push(match[1]);\r\n    }\r\n\r\n    return foundVariables;\r\n  };\r\n\r\n  const updatePromptListVisibility = useCallback((text: string) => {\r\n    const match = text.match(/\\/\\w*$/);\r\n\r\n    if (match) {\r\n      setShowPromptList(true);\r\n      setPromptInputValue(match[0].slice(1));\r\n    } else {\r\n      setShowPromptList(false);\r\n      setPromptInputValue('');\r\n    }\r\n  }, []);\r\n\r\n  const handlePromptSelect = (prompt: Prompt) => {\r\n    const parsedVariables = parseVariables(prompt.content);\r\n    setVariables(parsedVariables);\r\n\r\n    if (parsedVariables.length > 0) {\r\n      setIsModalVisible(true);\r\n    } else {\r\n      setContent((prevContent) => {\r\n        const updatedContent = prevContent?.replace(/\\/\\w*$/, prompt.content);\r\n        return updatedContent;\r\n      });\r\n      updatePromptListVisibility(prompt.content);\r\n    }\r\n  };\r\n\r\n  const handleSubmit = (updatedVariables: string[]) => {\r\n    const newContent = content?.replace(/{{(.*?)}}/g, (match, variable) => {\r\n      const index = variables.indexOf(variable);\r\n      return updatedVariables[index];\r\n    });\r\n\r\n    setContent(newContent);\r\n\r\n    if (textareaRef && textareaRef.current) {\r\n      textareaRef.current.focus();\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (promptListRef.current) {\r\n      promptListRef.current.scrollTop = activePromptIndex * 30;\r\n    }\r\n  }, [activePromptIndex]);\r\n\r\n  useEffect(() => {\r\n    if (textareaRef && textareaRef.current) {\r\n      textareaRef.current.style.height = 'inherit';\r\n      textareaRef.current.style.height = `${textareaRef.current?.scrollHeight}px`;\r\n      textareaRef.current.style.overflow = `${\r\n        textareaRef?.current?.scrollHeight > 400 ? 'auto' : 'hidden'\r\n      }`;\r\n    }\r\n  }, [content]);\r\n\r\n  useEffect(() => {\r\n    const handleOutsideClick = (e: MouseEvent) => {\r\n      if (\r\n        promptListRef.current &&\r\n        !promptListRef.current.contains(e.target as Node)\r\n      ) {\r\n        setShowPromptList(false);\r\n      }\r\n    };\r\n\r\n    window.addEventListener('click', handleOutsideClick);\r\n\r\n    return () => {\r\n      window.removeEventListener('click', handleOutsideClick);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"absolute bottom-0 left-0 w-full border-transparent bg-gradient-to-b from-transparent via-white to-white pt-6 dark:border-white/20 dark:via-[#343541] dark:to-[#343541] md:pt-2\">\r\n      <div className=\"stretch mx-2 mt-4 flex flex-row gap-3 last:mb-2 md:mx-4 md:mt-[52px] md:last:mb-6 lg:mx-auto lg:max-w-3xl\">\r\n        {messageIsStreaming && (\r\n          <button\r\n            className=\"absolute top-0 left-0 right-0 mx-auto mb-3 flex w-fit items-center gap-3 rounded border border-neutral-200 bg-white py-2 px-4 text-black hover:opacity-50 dark:border-neutral-600 dark:bg-[#343541] dark:text-white md:mb-0 md:mt-2\"\r\n            onClick={handleStopConversation}\r\n          >\r\n            <IconPlayerStop size={16} /> {t('Stop Generating')}\r\n          </button>\r\n        )}\r\n\r\n        {!messageIsStreaming &&\r\n          selectedConversation &&\r\n          selectedConversation.messages.length > 0 && (\r\n            <button\r\n              className=\"absolute top-0 left-0 right-0 mx-auto mb-3 flex w-fit items-center gap-3 rounded border border-neutral-200 bg-white py-2 px-4 text-black hover:opacity-50 dark:border-neutral-600 dark:bg-[#343541] dark:text-white md:mb-0 md:mt-2\"\r\n              onClick={onRegenerate}\r\n            >\r\n              <IconRepeat size={16} /> {t('Regenerate response')}\r\n            </button>\r\n          )}\r\n\r\n        <div className=\"relative mx-2 flex w-full flex-grow flex-col rounded-md border border-black/10 bg-white shadow-[0_0_10px_rgba(0,0,0,0.10)] dark:border-gray-900/50 dark:bg-[#40414F] dark:text-white dark:shadow-[0_0_15px_rgba(0,0,0,0.10)] sm:mx-4\">\r\n          <button\r\n            className=\"absolute left-2 top-2 rounded-sm p-1 text-neutral-800 opacity-60 hover:bg-neutral-200 hover:text-neutral-900 dark:bg-opacity-50 dark:text-neutral-100 dark:hover:text-neutral-200\"\r\n            onClick={() => setShowPluginSelect(!showPluginSelect)}\r\n            onKeyDown={(e) => {}}\r\n          >\r\n            {plugin ? <IconBrandGoogle size={20} /> : <IconBolt size={20} />}\r\n          </button>\r\n\r\n          {showPluginSelect && (\r\n            <div className=\"absolute left-0 bottom-14 rounded bg-white dark:bg-[#343541]\">\r\n              <PluginSelect\r\n                plugin={plugin}\r\n                onKeyDown={(e: any) => {\r\n                  if (e.key === 'Escape') {\r\n                    e.preventDefault();\r\n                    setShowPluginSelect(false);\r\n                    textareaRef.current?.focus();\r\n                  }\r\n                }}\r\n                onPluginChange={(plugin: Plugin) => {\r\n                  setPlugin(plugin);\r\n                  setShowPluginSelect(false);\r\n\r\n                  if (textareaRef && textareaRef.current) {\r\n                    textareaRef.current.focus();\r\n                  }\r\n                }}\r\n              />\r\n            </div>\r\n          )}\r\n\r\n          <textarea\r\n            ref={textareaRef}\r\n            className=\"m-0 w-full resize-none border-0 bg-transparent p-0 py-2 pr-8 pl-10 text-black dark:bg-transparent dark:text-white md:py-3 md:pl-10\"\r\n            style={{\r\n              resize: 'none',\r\n              bottom: `${textareaRef?.current?.scrollHeight}px`,\r\n              maxHeight: '400px',\r\n              overflow: `${\r\n                textareaRef.current && textareaRef.current.scrollHeight > 400\r\n                  ? 'auto'\r\n                  : 'hidden'\r\n              }`,\r\n            }}\r\n            placeholder={\r\n              t('Type a message or type \"/\" to select a prompt...') || ''\r\n            }\r\n            value={content}\r\n            rows={1}\r\n            onCompositionStart={() => setIsTyping(true)}\r\n            onCompositionEnd={() => setIsTyping(false)}\r\n            onChange={handleChange}\r\n            onKeyDown={handleKeyDown}\r\n          />\r\n\r\n          <button\r\n            className=\"absolute right-2 top-2 rounded-sm p-1 text-neutral-800 opacity-60 hover:bg-neutral-200 hover:text-neutral-900 dark:bg-opacity-50 dark:text-neutral-100 dark:hover:text-neutral-200\"\r\n            onClick={handleSend}\r\n          >\r\n            {messageIsStreaming ? (\r\n              <div className=\"h-4 w-4 animate-spin rounded-full border-t-2 border-neutral-800 opacity-60 dark:border-neutral-100\"></div>\r\n            ) : (\r\n              <IconSend size={18} />\r\n            )}\r\n          </button>\r\n\r\n          {showScrollDownButton && (\r\n            <div className=\"absolute bottom-12 right-0 lg:bottom-0 lg:-right-10\">\r\n              <button\r\n                className=\"flex h-7 w-7 items-center justify-center rounded-full bg-neutral-300 text-gray-800 shadow-md hover:shadow-lg focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-neutral-200\"\r\n                onClick={onScrollDownClick}\r\n              >\r\n                <IconArrowDown size={18} />\r\n              </button>\r\n            </div>\r\n          )}\r\n\r\n          {showPromptList && filteredPrompts.length > 0 && (\r\n            <div className=\"absolute bottom-12 w-full\">\r\n              <PromptList\r\n                activePromptIndex={activePromptIndex}\r\n                prompts={filteredPrompts}\r\n                onSelect={handleInitModal}\r\n                onMouseOver={setActivePromptIndex}\r\n                promptListRef={promptListRef}\r\n              />\r\n            </div>\r\n          )}\r\n\r\n          {isModalVisible && (\r\n            <VariableModal\r\n              prompt={filteredPrompts[activePromptIndex]}\r\n              variables={variables}\r\n              onSubmit={handleSubmit}\r\n              onClose={() => setIsModalVisible(false)}\r\n            />\r\n          )}\r\n        </div>\r\n      </div>\r\n      <div className=\"px-3 pt-2 pb-3 text-center text-[12px] text-black/50 dark:text-white/50 md:px-4 md:pt-3 md:pb-6\">\r\n        <a\r\n          href=\"https://github.com/rulz-ai\"\r\n          target=\"_blank\"\r\n          rel=\"noreferrer\"\r\n          className=\"underline\"\r\n        >\r\n          RULZ-AI\r\n        </a>\r\n        {' '}\r\n        {t(\r\n          \"is an advanced chatbot kit for OpenAI's chat models aiming to mimic ChatGPT's interface and functionality.\",\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","/Users/rulz-ai/Rulz-AI/components/Chat/ChatLoader.tsx",[],[],"/Users/rulz-ai/Rulz-AI/components/Chat/ChatMessage.tsx",["341","342"],[],"import {\r\n  IconCheck,\r\n  IconCopy,\r\n  IconEdit,\r\n  IconRobot,\r\n  IconTrash,\r\n  IconUser,\r\n} from '@tabler/icons-react';\r\nimport { FC, memo, useContext, useEffect, useRef, useState } from 'react';\r\n\r\nimport { useTranslation } from 'next-i18next';\r\n\r\nimport { updateConversation } from '@/utils/app/conversation';\r\n\r\nimport { Message } from '@/types/chat';\r\n\r\nimport HomeContext from '@/pages/api/home/home.context';\r\n\r\nimport { CodeBlock } from '../Markdown/CodeBlock';\r\nimport { MemoizedReactMarkdown } from '../Markdown/MemoizedReactMarkdown';\r\n\r\nimport rehypeMathjax from 'rehype-mathjax';\r\nimport remarkGfm from 'remark-gfm';\r\nimport remarkMath from 'remark-math';\r\n\r\nexport interface Props {\r\n  message: Message;\r\n  messageIndex: number;\r\n  onEdit?: (editedMessage: Message) => void\r\n}\r\n\r\nexport const ChatMessage: FC<Props> = memo(({ message, messageIndex, onEdit }) => {\r\n  const { t } = useTranslation('chat');\r\n\r\n  const {\r\n    state: { selectedConversation, conversations, currentMessage, messageIsStreaming },\r\n    dispatch: homeDispatch,\r\n  } = useContext(HomeContext);\r\n\r\n  const [isEditing, setIsEditing] = useState<boolean>(false);\r\n  const [isTyping, setIsTyping] = useState<boolean>(false);\r\n  const [messageContent, setMessageContent] = useState(message.content);\r\n  const [messagedCopied, setMessageCopied] = useState(false);\r\n\r\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\r\n\r\n  const toggleEditing = () => {\r\n    setIsEditing(!isEditing);\r\n  };\r\n\r\n  const handleInputChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\r\n    setMessageContent(event.target.value);\r\n    if (textareaRef.current) {\r\n      textareaRef.current.style.height = 'inherit';\r\n      textareaRef.current.style.height = `${textareaRef.current.scrollHeight}px`;\r\n    }\r\n  };\r\n\r\n  const handleEditMessage = () => {\r\n    if (message.content != messageContent) {\r\n      if (selectedConversation && onEdit) {\r\n        onEdit({ ...message, content: messageContent });\r\n      }\r\n    }\r\n    setIsEditing(false);\r\n  };\r\n\r\n  const handleDeleteMessage = () => {\r\n    if (!selectedConversation) return;\r\n\r\n    const { messages } = selectedConversation;\r\n    const findIndex = messages.findIndex((elm) => elm === message);\r\n\r\n    if (findIndex < 0) return;\r\n\r\n    if (\r\n      findIndex < messages.length - 1 &&\r\n      messages[findIndex + 1].role === 'assistant'\r\n    ) {\r\n      messages.splice(findIndex, 2);\r\n    } else {\r\n      messages.splice(findIndex, 1);\r\n    }\r\n    const updatedConversation = {\r\n      ...selectedConversation,\r\n      messages,\r\n    };\r\n\r\n    const { single, all } = updateConversation(\r\n      updatedConversation,\r\n      conversations,\r\n    );\r\n    homeDispatch({ field: 'selectedConversation', value: single });\r\n    homeDispatch({ field: 'conversations', value: all });\r\n  };\r\n\r\n  const handlePressEnter = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\r\n    if (e.key === 'Enter' && !isTyping && !e.shiftKey) {\r\n      e.preventDefault();\r\n      handleEditMessage();\r\n    }\r\n  };\r\n\r\n  const copyOnClick = () => {\r\n    if (!navigator.clipboard) return;\r\n\r\n    navigator.clipboard.writeText(message.content).then(() => {\r\n      setMessageCopied(true);\r\n      setTimeout(() => {\r\n        setMessageCopied(false);\r\n      }, 2000);\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    setMessageContent(message.content);\r\n  }, [message.content]);\r\n\r\n\r\n  useEffect(() => {\r\n    if (textareaRef.current) {\r\n      textareaRef.current.style.height = 'inherit';\r\n      textareaRef.current.style.height = `${textareaRef.current.scrollHeight}px`;\r\n    }\r\n  }, [isEditing]);\r\n\r\n  return (\r\n    <div\r\n      className={`group md:px-4 ${\r\n        message.role === 'assistant'\r\n          ? 'border-b border-black/10 bg-gray-50 text-gray-800 dark:border-gray-900/50 dark:bg-[#444654] dark:text-gray-100'\r\n          : 'border-b border-black/10 bg-white text-gray-800 dark:border-gray-900/50 dark:bg-[#343541] dark:text-gray-100'\r\n      }`}\r\n      style={{ overflowWrap: 'anywhere' }}\r\n    >\r\n      <div className=\"relative m-auto flex p-4 text-base md:max-w-2xl md:gap-6 md:py-6 lg:max-w-2xl lg:px-0 xl:max-w-3xl\">\r\n        <div className=\"min-w-[40px] text-right font-bold\">\r\n          {message.role === 'assistant' ? (\r\n            <img src=\"IconRobot.ico\" alt=\"Assistant\" width={25} height={25} />\r\n          ) : (\r\n            <img src=\"IconUser.ico\" alt=\"User\" width={25} height={25} />\r\n          )}\r\n        </div>\r\n\r\n        <div className=\"prose mt-[-2px] w-full dark:prose-invert\">\r\n          {message.role === 'user' ? (\r\n            <div className=\"flex w-full\">\r\n              {isEditing ? (\r\n                <div className=\"flex w-full flex-col\">\r\n                  <textarea\r\n                    ref={textareaRef}\r\n                    className=\"w-full resize-none whitespace-pre-wrap border-none dark:bg-[#343541]\"\r\n                    value={messageContent}\r\n                    onChange={handleInputChange}\r\n                    onKeyDown={handlePressEnter}\r\n                    onCompositionStart={() => setIsTyping(true)}\r\n                    onCompositionEnd={() => setIsTyping(false)}\r\n                    style={{\r\n                      fontFamily: 'inherit',\r\n                      fontSize: 'inherit',\r\n                      lineHeight: 'inherit',\r\n                      padding: '0',\r\n                      margin: '0',\r\n                      overflow: 'hidden',\r\n                    }}\r\n                  />\r\n\r\n                  <div className=\"mt-10 flex justify-center space-x-4\">\r\n                    <button\r\n                      className=\"h-[40px] rounded-md bg-blue-500 px-4 py-1 text-sm font-medium text-white enabled:hover:bg-blue-600 disabled:opacity-50\"\r\n                      onClick={handleEditMessage}\r\n                      disabled={messageContent.trim().length <= 0}\r\n                    >\r\n                      {t('Save & Submit')}\r\n                    </button>\r\n                    <button\r\n                      className=\"h-[40px] rounded-md border border-neutral-300 px-4 py-1 text-sm font-medium text-neutral-700 hover:bg-neutral-100 dark:border-neutral-700 dark:text-neutral-300 dark:hover:bg-neutral-800\"\r\n                      onClick={() => {\r\n                        setMessageContent(message.content);\r\n                        setIsEditing(false);\r\n                      }}\r\n                    >\r\n                      {t('Cancel')}\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              ) : (\r\n                <div className=\"prose whitespace-pre-wrap dark:prose-invert flex-1\">\r\n                  {message.content}\r\n                </div>\r\n              )}\r\n\r\n              {!isEditing && (\r\n                <div className=\"md:-mr-8 ml-1 md:ml-0 flex flex-col md:flex-row gap-4 md:gap-1 items-center md:items-start justify-end md:justify-start\">\r\n                  <button\r\n                    className=\"invisible group-hover:visible focus:visible text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300\"\r\n                    onClick={toggleEditing}\r\n                  >\r\n                    <IconEdit size={20} />\r\n                  </button>\r\n                  <button\r\n                    className=\"invisible group-hover:visible focus:visible text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300\"\r\n                    onClick={handleDeleteMessage}\r\n                  >\r\n                    <IconTrash size={20} />\r\n                  </button>\r\n                </div>\r\n              )}\r\n            </div>\r\n          ) : (\r\n            <div className=\"flex flex-row\">\r\n              <MemoizedReactMarkdown\r\n                className=\"prose dark:prose-invert flex-1\"\r\n                remarkPlugins={[remarkGfm, remarkMath]}\r\n                rehypePlugins={[rehypeMathjax]}\r\n                components={{\r\n                  code({ node, inline, className, children, ...props }) {\r\n                    if (children.length) {\r\n                      if (children[0] == '▍') {\r\n                        return <span className=\"animate-pulse cursor-default mt-1\">▍</span>\r\n                      }\r\n\r\n                      children[0] = (children[0] as string).replace(\"`▍`\", \"▍\")\r\n                    }\r\n\r\n                    const match = /language-(\\w+)/.exec(className || '');\r\n\r\n                    return !inline ? (\r\n                      <CodeBlock\r\n                        key={Math.random()}\r\n                        language={(match && match[1]) || ''}\r\n                        value={String(children).replace(/\\n$/, '')}\r\n                        {...props}\r\n                      />\r\n                    ) : (\r\n                      <code className={className} {...props}>\r\n                        {children}\r\n                      </code>\r\n                    );\r\n                  },\r\n                  table({ children }) {\r\n                    return (\r\n                      <table className=\"border-collapse border border-black px-3 py-1 dark:border-white\">\r\n                        {children}\r\n                      </table>\r\n                    );\r\n                  },\r\n                  th({ children }) {\r\n                    return (\r\n                      <th className=\"break-words border border-black bg-gray-500 px-3 py-1 text-white dark:border-white\">\r\n                        {children}\r\n                      </th>\r\n                    );\r\n                  },\r\n                  td({ children }) {\r\n                    return (\r\n                      <td className=\"break-words border border-black px-3 py-1 dark:border-white\">\r\n                        {children}\r\n                      </td>\r\n                    );\r\n                  },\r\n                }}\r\n              >\r\n                {`${message.content}${\r\n                  messageIsStreaming && messageIndex == (selectedConversation?.messages.length ?? 0) - 1 ? '`▍`' : ''\r\n                }`}\r\n              </MemoizedReactMarkdown>\r\n\r\n              <div className=\"md:-mr-8 ml-1 md:ml-0 flex flex-col md:flex-row gap-4 md:gap-1 items-center md:items-start justify-end md:justify-start\">\r\n                {messagedCopied ? (\r\n                  <IconCheck\r\n                    size={20}\r\n                    className=\"text-green-500 dark:text-green-400\"\r\n                  />\r\n                ) : (\r\n                  <button\r\n                    className=\"invisible group-hover:visible focus:visible text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300\"\r\n                    onClick={copyOnClick}\r\n                  >\r\n                    <IconCopy size={20} />\r\n                  </button>\r\n                )}\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\nChatMessage.displayName = 'ChatMessage';\r\n","/Users/rulz-ai/Rulz-AI/components/Chat/ErrorMessageDiv.tsx",[],[],"/Users/rulz-ai/Rulz-AI/components/Chat/MemoizedChatMessage.tsx",[],[],"/Users/rulz-ai/Rulz-AI/components/Chat/ModelSelect.tsx",[],[],"/Users/rulz-ai/Rulz-AI/components/Chat/PluginSelect.tsx",[],[],"/Users/rulz-ai/Rulz-AI/components/Chat/PromptList.tsx",[],[],"/Users/rulz-ai/Rulz-AI/components/Chat/Regenerate.tsx",[],[],"/Users/rulz-ai/Rulz-AI/components/Chat/SystemPrompt.tsx",[],[],"/Users/rulz-ai/Rulz-AI/components/Chat/Temperature.tsx",[],[],"/Users/rulz-ai/Rulz-AI/components/Chat/VariableModal.tsx",[],[],"/Users/rulz-ai/Rulz-AI/components/Chatbar/Chatbar.context.tsx",[],[],"/Users/rulz-ai/Rulz-AI/components/Chatbar/Chatbar.state.tsx",[],[],"/Users/rulz-ai/Rulz-AI/components/Chatbar/Chatbar.tsx",["343"],[],"import { useCallback, useContext, useEffect } from 'react';\r\n\r\nimport { useTranslation } from 'next-i18next';\r\n\r\nimport { useCreateReducer } from '@/hooks/useCreateReducer';\r\n\r\nimport { DEFAULT_SYSTEM_PROMPT, DEFAULT_TEMPERATURE } from '@/utils/app/const';\r\nimport { saveConversation, saveConversations } from '@/utils/app/conversation';\r\nimport { saveFolders } from '@/utils/app/folders';\r\nimport { exportData, importData } from '@/utils/app/importExport';\r\n\r\nimport { Conversation } from '@/types/chat';\r\nimport { LatestExportFormat, SupportedExportFormats } from '@/types/export';\r\nimport { OpenAIModels } from '@/types/openai';\r\nimport { PluginKey } from '@/types/plugin';\r\n\r\nimport HomeContext from '@/pages/api/home/home.context';\r\n\r\nimport { ChatFolders } from './components/ChatFolders';\r\nimport { ChatbarSettings } from './components/ChatbarSettings';\r\nimport { Conversations } from './components/Conversations';\r\n\r\nimport Sidebar from '../Sidebar';\r\nimport ChatbarContext from './Chatbar.context';\r\nimport { ChatbarInitialState, initialState } from './Chatbar.state';\r\n\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nexport const Chatbar = () => {\r\n  const { t } = useTranslation('sidebar');\r\n\r\n  const chatBarContextValue = useCreateReducer<ChatbarInitialState>({\r\n    initialState,\r\n  });\r\n\r\n  const {\r\n    state: { conversations, showChatbar, defaultModelId, folders, pluginKeys },\r\n    dispatch: homeDispatch,\r\n    handleCreateFolder,\r\n    handleNewConversation,\r\n    handleUpdateConversation,\r\n  } = useContext(HomeContext);\r\n\r\n  const {\r\n    state: { searchTerm, filteredConversations },\r\n    dispatch: chatDispatch,\r\n  } = chatBarContextValue;\r\n\r\n  const handleApiKeyChange = useCallback(\r\n    (apiKey: string) => {\r\n      homeDispatch({ field: 'apiKey', value: apiKey });\r\n\r\n      localStorage.setItem('apiKey', apiKey);\r\n    },\r\n    [homeDispatch],\r\n  );\r\n\r\n  const handlePluginKeyChange = (pluginKey: PluginKey) => {\r\n    if (pluginKeys.some((key) => key.pluginId === pluginKey.pluginId)) {\r\n      const updatedPluginKeys = pluginKeys.map((key) => {\r\n        if (key.pluginId === pluginKey.pluginId) {\r\n          return pluginKey;\r\n        }\r\n\r\n        return key;\r\n      });\r\n\r\n      homeDispatch({ field: 'pluginKeys', value: updatedPluginKeys });\r\n\r\n      localStorage.setItem('pluginKeys', JSON.stringify(updatedPluginKeys));\r\n    } else {\r\n      homeDispatch({ field: 'pluginKeys', value: [...pluginKeys, pluginKey] });\r\n\r\n      localStorage.setItem(\r\n        'pluginKeys',\r\n        JSON.stringify([...pluginKeys, pluginKey]),\r\n      );\r\n    }\r\n  };\r\n\r\n  const handleClearPluginKey = (pluginKey: PluginKey) => {\r\n    const updatedPluginKeys = pluginKeys.filter(\r\n      (key) => key.pluginId !== pluginKey.pluginId,\r\n    );\r\n\r\n    if (updatedPluginKeys.length === 0) {\r\n      homeDispatch({ field: 'pluginKeys', value: [] });\r\n      localStorage.removeItem('pluginKeys');\r\n      return;\r\n    }\r\n\r\n    homeDispatch({ field: 'pluginKeys', value: updatedPluginKeys });\r\n\r\n    localStorage.setItem('pluginKeys', JSON.stringify(updatedPluginKeys));\r\n  };\r\n\r\n  const handleExportData = () => {\r\n    exportData();\r\n  };\r\n\r\n  const handleImportConversations = (data: SupportedExportFormats) => {\r\n    const { history, folders, prompts }: LatestExportFormat = importData(data);\r\n    homeDispatch({ field: 'conversations', value: history });\r\n    homeDispatch({\r\n      field: 'selectedConversation',\r\n      value: history[history.length - 1],\r\n    });\r\n    homeDispatch({ field: 'folders', value: folders });\r\n    homeDispatch({ field: 'prompts', value: prompts });\r\n\r\n    window.location.reload();\r\n  };\r\n\r\n  const handleClearConversations = () => {\r\n    defaultModelId &&\r\n      homeDispatch({\r\n        field: 'selectedConversation',\r\n        value: {\r\n          id: uuidv4(),\r\n          name: t('New Conversation'),\r\n          messages: [],\r\n          model: OpenAIModels[defaultModelId],\r\n          prompt: DEFAULT_SYSTEM_PROMPT,\r\n          temperature: DEFAULT_TEMPERATURE,\r\n          folderId: null,\r\n        },\r\n      });\r\n\r\n    homeDispatch({ field: 'conversations', value: [] });\r\n\r\n    localStorage.removeItem('conversationHistory');\r\n    localStorage.removeItem('selectedConversation');\r\n\r\n    const updatedFolders = folders.filter((f) => f.type !== 'chat');\r\n\r\n    homeDispatch({ field: 'folders', value: updatedFolders });\r\n    saveFolders(updatedFolders);\r\n  };\r\n\r\n  const handleDeleteConversation = (conversation: Conversation) => {\r\n    const updatedConversations = conversations.filter(\r\n      (c) => c.id !== conversation.id,\r\n    );\r\n\r\n    homeDispatch({ field: 'conversations', value: updatedConversations });\r\n    chatDispatch({ field: 'searchTerm', value: '' });\r\n    saveConversations(updatedConversations);\r\n\r\n    if (updatedConversations.length > 0) {\r\n      homeDispatch({\r\n        field: 'selectedConversation',\r\n        value: updatedConversations[updatedConversations.length - 1],\r\n      });\r\n\r\n      saveConversation(updatedConversations[updatedConversations.length - 1]);\r\n    } else {\r\n      defaultModelId &&\r\n        homeDispatch({\r\n          field: 'selectedConversation',\r\n          value: {\r\n            id: uuidv4(),\r\n            name: t('New Conversation'),\r\n            messages: [],\r\n            model: OpenAIModels[defaultModelId],\r\n            prompt: DEFAULT_SYSTEM_PROMPT,\r\n            temperature: DEFAULT_TEMPERATURE,\r\n            folderId: null,\r\n          },\r\n        });\r\n\r\n      localStorage.removeItem('selectedConversation');\r\n    }\r\n  };\r\n\r\n  const handleToggleChatbar = () => {\r\n    homeDispatch({ field: 'showChatbar', value: !showChatbar });\r\n    localStorage.setItem('showChatbar', JSON.stringify(!showChatbar));\r\n  };\r\n\r\n  const handleDrop = (e: any) => {\r\n    if (e.dataTransfer) {\r\n      const conversation = JSON.parse(e.dataTransfer.getData('conversation'));\r\n      handleUpdateConversation(conversation, { key: 'folderId', value: 0 });\r\n      chatDispatch({ field: 'searchTerm', value: '' });\r\n      e.target.style.background = 'none';\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (searchTerm) {\r\n      chatDispatch({\r\n        field: 'filteredConversations',\r\n        value: conversations.filter((conversation) => {\r\n          const searchable =\r\n            conversation.name.toLocaleLowerCase() +\r\n            ' ' +\r\n            conversation.messages.map((message) => message.content).join(' ');\r\n          return searchable.toLowerCase().includes(searchTerm.toLowerCase());\r\n        }),\r\n      });\r\n    } else {\r\n      chatDispatch({\r\n        field: 'filteredConversations',\r\n        value: conversations,\r\n      });\r\n    }\r\n  }, [searchTerm, conversations]);\r\n\r\n  return (\r\n    <ChatbarContext.Provider\r\n      value={{\r\n        ...chatBarContextValue,\r\n        handleDeleteConversation,\r\n        handleClearConversations,\r\n        handleImportConversations,\r\n        handleExportData,\r\n        handlePluginKeyChange,\r\n        handleClearPluginKey,\r\n        handleApiKeyChange,\r\n      }}\r\n    >\r\n      <Sidebar<Conversation>\r\n        side={'left'}\r\n        isOpen={showChatbar}\r\n        addItemButtonTitle={t('New chat')}\r\n        itemComponent={<Conversations conversations={filteredConversations} />}\r\n        folderComponent={<ChatFolders searchTerm={searchTerm} />}\r\n        items={filteredConversations}\r\n        searchTerm={searchTerm}\r\n        handleSearchTerm={(searchTerm: string) =>\r\n          chatDispatch({ field: 'searchTerm', value: searchTerm })\r\n        }\r\n        toggleOpen={handleToggleChatbar}\r\n        handleCreateItem={handleNewConversation}\r\n        handleCreateFolder={() => handleCreateFolder(t('New folder'), 'chat')}\r\n        handleDrop={handleDrop}\r\n        footerComponent={<ChatbarSettings />}\r\n      />\r\n    </ChatbarContext.Provider>\r\n  );\r\n};\r\n","/Users/rulz-ai/Rulz-AI/components/Chatbar/components/ChatFolders.tsx",[],[],"/Users/rulz-ai/Rulz-AI/components/Chatbar/components/ChatbarSettings.tsx",[],[],"/Users/rulz-ai/Rulz-AI/components/Chatbar/components/ClearConversations.tsx",[],[],"/Users/rulz-ai/Rulz-AI/components/Chatbar/components/Conversation.tsx",[],[],"/Users/rulz-ai/Rulz-AI/components/Chatbar/components/Conversations.tsx",[],[],"/Users/rulz-ai/Rulz-AI/components/Chatbar/components/PluginKeys.tsx",[],[],"/Users/rulz-ai/Rulz-AI/components/Folder/Folder.tsx",[],[],"/Users/rulz-ai/Rulz-AI/components/Folder/index.ts",[],[],"/Users/rulz-ai/Rulz-AI/components/Markdown/CodeBlock.tsx",[],[],"/Users/rulz-ai/Rulz-AI/components/Markdown/MemoizedReactMarkdown.tsx",[],[],"/Users/rulz-ai/Rulz-AI/components/Mobile/Navbar.tsx",[],[],"/Users/rulz-ai/Rulz-AI/components/Promptbar/PromptBar.context.tsx",[],[],"/Users/rulz-ai/Rulz-AI/components/Promptbar/Promptbar.state.tsx",[],[],"/Users/rulz-ai/Rulz-AI/components/Promptbar/Promptbar.tsx",["344"],[],"import { useContext, useEffect, useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport { useCreateReducer } from '@/hooks/useCreateReducer';\r\n\r\nimport { savePrompts } from '@/utils/app/prompts';\r\n\r\nimport { OpenAIModels } from '@/types/openai';\r\nimport { Prompt } from '@/types/prompt';\r\n\r\nimport HomeContext from '@/pages/api/home/home.context';\r\n\r\nimport { PromptFolders } from './components/PromptFolders';\r\nimport { PromptbarSettings } from './components/PromptbarSettings';\r\nimport { Prompts } from './components/Prompts';\r\n\r\nimport Sidebar from '../Sidebar';\r\nimport PromptbarContext from './PromptBar.context';\r\nimport { PromptbarInitialState, initialState } from './Promptbar.state';\r\n\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nconst Promptbar = () => {\r\n  const { t } = useTranslation('promptbar');\r\n\r\n  const promptBarContextValue = useCreateReducer<PromptbarInitialState>({\r\n    initialState,\r\n  });\r\n\r\n  const {\r\n    state: { prompts, defaultModelId, showPromptbar },\r\n    dispatch: homeDispatch,\r\n    handleCreateFolder,\r\n  } = useContext(HomeContext);\r\n\r\n  const {\r\n    state: { searchTerm, filteredPrompts },\r\n    dispatch: promptDispatch,\r\n  } = promptBarContextValue;\r\n\r\n  const handleTogglePromptbar = () => {\r\n    homeDispatch({ field: 'showPromptbar', value: !showPromptbar });\r\n    localStorage.setItem('showPromptbar', JSON.stringify(!showPromptbar));\r\n  };\r\n\r\n  const handleCreatePrompt = () => {\r\n    if (defaultModelId) {\r\n      const newPrompt: Prompt = {\r\n        id: uuidv4(),\r\n        name: `Prompt ${prompts.length + 1}`,\r\n        description: '',\r\n        content: '',\r\n        model: OpenAIModels[defaultModelId],\r\n        folderId: null,\r\n      };\r\n\r\n      const updatedPrompts = [...prompts, newPrompt];\r\n\r\n      homeDispatch({ field: 'prompts', value: updatedPrompts });\r\n\r\n      savePrompts(updatedPrompts);\r\n    }\r\n  };\r\n\r\n  const handleDeletePrompt = (prompt: Prompt) => {\r\n    const updatedPrompts = prompts.filter((p) => p.id !== prompt.id);\r\n\r\n    homeDispatch({ field: 'prompts', value: updatedPrompts });\r\n    savePrompts(updatedPrompts);\r\n  };\r\n\r\n  const handleUpdatePrompt = (prompt: Prompt) => {\r\n    const updatedPrompts = prompts.map((p) => {\r\n      if (p.id === prompt.id) {\r\n        return prompt;\r\n      }\r\n\r\n      return p;\r\n    });\r\n    homeDispatch({ field: 'prompts', value: updatedPrompts });\r\n\r\n    savePrompts(updatedPrompts);\r\n  };\r\n\r\n  const handleDrop = (e: any) => {\r\n    if (e.dataTransfer) {\r\n      const prompt = JSON.parse(e.dataTransfer.getData('prompt'));\r\n\r\n      const updatedPrompt = {\r\n        ...prompt,\r\n        folderId: e.target.dataset.folderId,\r\n      };\r\n\r\n      handleUpdatePrompt(updatedPrompt);\r\n\r\n      e.target.style.background = 'none';\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (searchTerm) {\r\n      promptDispatch({\r\n        field: 'filteredPrompts',\r\n        value: prompts.filter((prompt) => {\r\n          const searchable =\r\n            prompt.name.toLowerCase() +\r\n            ' ' +\r\n            prompt.description.toLowerCase() +\r\n            ' ' +\r\n            prompt.content.toLowerCase();\r\n          return searchable.includes(searchTerm.toLowerCase());\r\n        }),\r\n      });\r\n    } else {\r\n      promptDispatch({ field: 'filteredPrompts', value: prompts });\r\n    }\r\n  }, [searchTerm, prompts]);\r\n\r\n  return (\r\n    <PromptbarContext.Provider\r\n      value={{\r\n        ...promptBarContextValue,\r\n        handleCreatePrompt,\r\n        handleDeletePrompt,\r\n        handleUpdatePrompt,\r\n      }}\r\n    >\r\n      <Sidebar<Prompt>\r\n        side={'right'}\r\n        isOpen={showPromptbar}\r\n        addItemButtonTitle={t('New prompt')}\r\n        itemComponent={\r\n          <Prompts\r\n            prompts={filteredPrompts.filter((prompt) => !prompt.folderId)}\r\n          />\r\n        }\r\n        folderComponent={<PromptFolders />}\r\n        items={filteredPrompts}\r\n        searchTerm={searchTerm}\r\n        handleSearchTerm={(searchTerm: string) =>\r\n          promptDispatch({ field: 'searchTerm', value: searchTerm })\r\n        }\r\n        toggleOpen={handleTogglePromptbar}\r\n        handleCreateItem={handleCreatePrompt}\r\n        handleCreateFolder={() => handleCreateFolder(t('New folder'), 'prompt')}\r\n        handleDrop={handleDrop}\r\n      />\r\n    </PromptbarContext.Provider>\r\n  );\r\n};\r\n\r\nexport default Promptbar;\r\n","/Users/rulz-ai/Rulz-AI/components/Promptbar/components/Prompt.tsx",[],[],"/Users/rulz-ai/Rulz-AI/components/Promptbar/components/PromptFolders.tsx",[],[],"/Users/rulz-ai/Rulz-AI/components/Promptbar/components/PromptModal.tsx",[],[],"/Users/rulz-ai/Rulz-AI/components/Promptbar/components/PromptbarSettings.tsx",[],[],"/Users/rulz-ai/Rulz-AI/components/Promptbar/components/Prompts.tsx",[],[],"/Users/rulz-ai/Rulz-AI/components/Promptbar/index.ts",[],[],"/Users/rulz-ai/Rulz-AI/components/Search/Search.tsx",[],[],"/Users/rulz-ai/Rulz-AI/components/Search/index.ts",[],[],"/Users/rulz-ai/Rulz-AI/components/Settings/Import.tsx",[],[],"/Users/rulz-ai/Rulz-AI/components/Settings/Key.tsx",[],[],"/Users/rulz-ai/Rulz-AI/components/Settings/SettingDialog.tsx",[],[],"/Users/rulz-ai/Rulz-AI/components/Sidebar/Sidebar.tsx",[],[],"/Users/rulz-ai/Rulz-AI/components/Sidebar/SidebarButton.tsx",[],[],"/Users/rulz-ai/Rulz-AI/components/Sidebar/components/OpenCloseButton.tsx",[],[],"/Users/rulz-ai/Rulz-AI/components/Sidebar/index.ts",[],[],"/Users/rulz-ai/Rulz-AI/components/Spinner/Spinner.tsx",[],[],"/Users/rulz-ai/Rulz-AI/components/Spinner/index.ts",[],[],"/Users/rulz-ai/Rulz-AI/src/App.js",["345"],[],"import logo from './logo.svg';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <p>\r\n          Edit <code>src/App.js</code> and save to reload.\r\n        </p>\r\n        <a\r\n          className=\"App-link\"\r\n          href=\"https://reactjs.org\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Learn React\r\n        </a>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","/Users/rulz-ai/Rulz-AI/src/App.test.js",[],[],"/Users/rulz-ai/Rulz-AI/src/index.js",[],[],"/Users/rulz-ai/Rulz-AI/src/realtime.js",[],[],"/Users/rulz-ai/Rulz-AI/src/reportWebVitals.js",[],[],"/Users/rulz-ai/Rulz-AI/src/setupTests.js",[],[],{"ruleId":"346","severity":1,"message":"347","line":15,"column":9,"nodeType":"348","endLine":19,"endColumn":11},{"ruleId":"349","severity":1,"message":"350","line":234,"column":6,"nodeType":"351","endLine":234,"endColumn":28,"suggestions":"352"},{"ruleId":"349","severity":1,"message":"350","line":249,"column":6,"nodeType":"351","endLine":249,"endColumn":70,"suggestions":"353"},{"ruleId":"349","severity":1,"message":"354","line":343,"column":6,"nodeType":"351","endLine":348,"endColumn":4,"suggestions":"355"},{"ruleId":"349","severity":1,"message":"356","line":248,"column":5,"nodeType":"351","endLine":254,"endColumn":6,"suggestions":"357"},{"ruleId":"349","severity":1,"message":"358","line":240,"column":6,"nodeType":"351","endLine":240,"endColumn":15,"suggestions":"359"},{"ruleId":"360","severity":1,"message":"361","line":139,"column":13,"nodeType":"348","endLine":139,"endColumn":79},{"ruleId":"360","severity":1,"message":"361","line":141,"column":13,"nodeType":"348","endLine":141,"endColumn":73},{"ruleId":"349","severity":1,"message":"362","line":207,"column":6,"nodeType":"351","endLine":207,"endColumn":33,"suggestions":"363"},{"ruleId":"349","severity":1,"message":"364","line":117,"column":6,"nodeType":"351","endLine":117,"endColumn":27,"suggestions":"365"},{"ruleId":"360","severity":1,"message":"361","line":8,"column":9,"nodeType":"348","endLine":8,"endColumn":59},"@next/next/no-sync-scripts","Synchronous scripts should not be used. See: https://nextjs.org/docs/messages/no-sync-scripts","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["366"],["367"],"React Hook useEffect has missing dependencies: 'conversations' and 't'. Either include them or remove the dependency array.",["368"],"React Hook useCallback has a missing dependency: 'homeDispatch'. Either include it or remove the dependency array.",["369"],"React Hook useEffect has a missing dependency: 'textareaRef'. Either include it or remove the dependency array.",["370"],"@next/next/no-img-element","Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","React Hook useEffect has a missing dependency: 'chatDispatch'. Either include it or remove the dependency array.",["371"],"React Hook useEffect has a missing dependency: 'promptDispatch'. Either include it or remove the dependency array.",["372"],{"desc":"373","fix":"374"},{"desc":"375","fix":"376"},{"desc":"377","fix":"378"},{"desc":"379","fix":"380"},{"desc":"381","fix":"382"},{"desc":"383","fix":"384"},{"desc":"385","fix":"386"},"Update the dependencies array to be: [dispatch, selectedConversation]",{"range":"387","text":"388"},"Update the dependencies array to be: [defaultModelId, dispatch, serverSideApiKeyIsSet, serverSidePluginKeysSet]",{"range":"389","text":"390"},"Update the dependencies array to be: [conversations, defaultModelId, dispatch, serverSideApiKeyIsSet, serverSidePluginKeysSet, t]",{"range":"391","text":"392"},"Update the dependencies array to be: [apiKey, conversations, homeDispatch, pluginKeys, selectedConversation, stopConversationRef]",{"range":"393","text":"394"},"Update the dependencies array to be: [content, textareaRef]",{"range":"395","text":"396"},"Update the dependencies array to be: [searchTerm, conversations, chatDispatch]",{"range":"397","text":"398"},"Update the dependencies array to be: [searchTerm, prompts, promptDispatch]",{"range":"399","text":"400"},[6582,6604],"[dispatch, selectedConversation]",[7012,7076],"[defaultModelId, dispatch, serverSideApiKeyIsSet, serverSidePluginKeysSet]",[10042,10142],"[conversations, defaultModelId, dispatch, serverSideApiKeyIsSet, serverSidePluginKeysSet, t]",[8831,8952],"[apiKey, conversations, homeDispatch, pluginKeys, selectedConversation, stopConversationRef]",[6940,6949],"[content, textareaRef]",[6604,6631],"[searchTerm, conversations, chatDispatch]",[3298,3319],"[searchTerm, prompts, promptDispatch]"]